// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/api/runtime/display/api.proto

/*
Package display is a generated protocol buffer package.

It is generated from these files:
	pkg/api/runtime/display/api.proto

It has these top-level messages:
	GraphResponse
	UsageResponse
	ContUsageRequest
	ContainerStat
	ContUsageResponse
	ContGpuinfo
	Devices
	DeviceInfo
	VersionResponse
	Spec
*/
package display

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GraphResponse struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
}

func (m *GraphResponse) Reset()                    { *m = GraphResponse{} }
func (m *GraphResponse) String() string            { return proto.CompactTextString(m) }
func (*GraphResponse) ProtoMessage()               {}
func (*GraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GraphResponse) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type UsageResponse struct {
	Usage map[string]*ContainerStat `protobuf:"bytes,1,rep,name=usage" json:"usage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UsageResponse) Reset()                    { *m = UsageResponse{} }
func (m *UsageResponse) String() string            { return proto.CompactTextString(m) }
func (*UsageResponse) ProtoMessage()               {}
func (*UsageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UsageResponse) GetUsage() map[string]*ContainerStat {
	if m != nil {
		return m.Usage
	}
	return nil
}

type ContUsageRequest struct {
	// GPUId
	GpuId string `protobuf:"bytes,1,opt,name=gpuId" json:"gpuId,omitempty"`
}

func (m *ContUsageRequest) Reset()                    { *m = ContUsageRequest{} }
func (m *ContUsageRequest) String() string            { return proto.CompactTextString(m) }
func (*ContUsageRequest) ProtoMessage()               {}
func (*ContUsageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContUsageRequest) GetGpuId() string {
	if m != nil {
		return m.GpuId
	}
	return ""
}

type ContainerStat struct {
	Stat    map[string]*Devices `protobuf:"bytes,1,rep,name=stat" json:"stat,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Project string              `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	User    string              `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Cluster string              `protobuf:"bytes,4,opt,name=cluster" json:"cluster,omitempty"`
	Spec    map[string]*Spec    `protobuf:"bytes,5,rep,name=spec" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ContainerStat) Reset()                    { *m = ContainerStat{} }
func (m *ContainerStat) String() string            { return proto.CompactTextString(m) }
func (*ContainerStat) ProtoMessage()               {}
func (*ContainerStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ContainerStat) GetStat() map[string]*Devices {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ContainerStat) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ContainerStat) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ContainerStat) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ContainerStat) GetSpec() map[string]*Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ContUsageResponse struct {
	Info []*ContGpuinfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ContUsageResponse) Reset()                    { *m = ContUsageResponse{} }
func (m *ContUsageResponse) String() string            { return proto.CompactTextString(m) }
func (*ContUsageResponse) ProtoMessage()               {}
func (*ContUsageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ContUsageResponse) GetInfo() []*ContGpuinfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ContGpuinfo struct {
	// 任务名称
	ProjectName string `protobuf:"bytes,1,opt,name=projectName" json:"projectName,omitempty"`
	// pod实例名称
	PodName string `protobuf:"bytes,2,opt,name=podName" json:"podName,omitempty"`
	// 容器索引号
	ContIdx string `protobuf:"bytes,3,opt,name=contIdx" json:"contIdx,omitempty"`
	// 容器id
	Contid string `protobuf:"bytes,4,opt,name=contid" json:"contid,omitempty"`
	// 容器名称
	ContName string `protobuf:"bytes,5,opt,name=contName" json:"contName,omitempty"`
	// 策略名称
	Policy string `protobuf:"bytes,6,opt,name=policy" json:"policy,omitempty"`
	// gpu卡id
	GpuId string `protobuf:"bytes,7,opt,name=GpuId" json:"GpuId,omitempty"`
	// 使用的gpu cores
	Gpu int64 `protobuf:"varint,8,opt,name=gpu" json:"gpu,omitempty"`
	// 使用的gpu memory
	Mem int64 `protobuf:"varint,9,opt,name=mem" json:"mem,omitempty"`
	// gpu 设备总mem
	FreeMem int64 `protobuf:"varint,10,opt,name=FreeMem" json:"FreeMem,omitempty"`
	// 优先级
	Priority string `protobuf:"bytes,11,opt,name=priority" json:"priority,omitempty"`
	// 命名空间
	Namespace string `protobuf:"bytes,12,opt,name=Namespace" json:"Namespace,omitempty"`
}

func (m *ContGpuinfo) Reset()                    { *m = ContGpuinfo{} }
func (m *ContGpuinfo) String() string            { return proto.CompactTextString(m) }
func (*ContGpuinfo) ProtoMessage()               {}
func (*ContGpuinfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ContGpuinfo) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *ContGpuinfo) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *ContGpuinfo) GetContIdx() string {
	if m != nil {
		return m.ContIdx
	}
	return ""
}

func (m *ContGpuinfo) GetContid() string {
	if m != nil {
		return m.Contid
	}
	return ""
}

func (m *ContGpuinfo) GetContName() string {
	if m != nil {
		return m.ContName
	}
	return ""
}

func (m *ContGpuinfo) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *ContGpuinfo) GetGpuId() string {
	if m != nil {
		return m.GpuId
	}
	return ""
}

func (m *ContGpuinfo) GetGpu() int64 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *ContGpuinfo) GetMem() int64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *ContGpuinfo) GetFreeMem() int64 {
	if m != nil {
		return m.FreeMem
	}
	return 0
}

func (m *ContGpuinfo) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *ContGpuinfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type Devices struct {
	Dev []*DeviceInfo `protobuf:"bytes,1,rep,name=dev" json:"dev,omitempty"`
}

func (m *Devices) Reset()                    { *m = Devices{} }
func (m *Devices) String() string            { return proto.CompactTextString(m) }
func (*Devices) ProtoMessage()               {}
func (*Devices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Devices) GetDev() []*DeviceInfo {
	if m != nil {
		return m.Dev
	}
	return nil
}

type DeviceInfo struct {
	Id        string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CardIdx   string  `protobuf:"bytes,2,opt,name=card_idx,json=cardIdx" json:"card_idx,omitempty"`
	Gpu       float32 `protobuf:"fixed32,10,opt,name=gpu" json:"gpu,omitempty"`
	Mem       float32 `protobuf:"fixed32,11,opt,name=mem" json:"mem,omitempty"`
	Pids      []int32 `protobuf:"varint,12,rep,packed,name=pids" json:"pids,omitempty"`
	DeviceMem float32 `protobuf:"fixed32,13,opt,name=device_mem,json=deviceMem" json:"device_mem,omitempty"`
}

func (m *DeviceInfo) Reset()                    { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()               {}
func (*DeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeviceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeviceInfo) GetCardIdx() string {
	if m != nil {
		return m.CardIdx
	}
	return ""
}

func (m *DeviceInfo) GetGpu() float32 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *DeviceInfo) GetMem() float32 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func (m *DeviceInfo) GetPids() []int32 {
	if m != nil {
		return m.Pids
	}
	return nil
}

func (m *DeviceInfo) GetDeviceMem() float32 {
	if m != nil {
		return m.DeviceMem
	}
	return 0
}

type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Spec struct {
	Gpu int64 `protobuf:"varint,1,opt,name=gpu" json:"gpu,omitempty"`
	Mem int64 `protobuf:"varint,2,opt,name=mem" json:"mem,omitempty"`
}

func (m *Spec) Reset()                    { *m = Spec{} }
func (m *Spec) String() string            { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()               {}
func (*Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Spec) GetGpu() int64 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *Spec) GetMem() int64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

func init() {
	proto.RegisterType((*GraphResponse)(nil), "display.GraphResponse")
	proto.RegisterType((*UsageResponse)(nil), "display.UsageResponse")
	proto.RegisterType((*ContUsageRequest)(nil), "display.ContUsageRequest")
	proto.RegisterType((*ContainerStat)(nil), "display.ContainerStat")
	proto.RegisterType((*ContUsageResponse)(nil), "display.ContUsageResponse")
	proto.RegisterType((*ContGpuinfo)(nil), "display.ContGpuinfo")
	proto.RegisterType((*Devices)(nil), "display.Devices")
	proto.RegisterType((*DeviceInfo)(nil), "display.DeviceInfo")
	proto.RegisterType((*VersionResponse)(nil), "display.VersionResponse")
	proto.RegisterType((*Spec)(nil), "display.Spec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GPUDisplay service

type GPUDisplayClient interface {
	// PrintGraph returns the text graph of allocator state
	PrintGraph(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GraphResponse, error)
	PrintGpuinfo(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GraphResponse, error)
	// GPU usages
	PrintUsages(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*UsageResponse, error)
	// gpu算力详细信息
	PrintGpuDetails(ctx context.Context, in *ContUsageRequest, opts ...grpc.CallOption) (*ContUsageResponse, error)
	// Version
	Version(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type gPUDisplayClient struct {
	cc *grpc.ClientConn
}

func NewGPUDisplayClient(cc *grpc.ClientConn) GPUDisplayClient {
	return &gPUDisplayClient{cc}
}

func (c *gPUDisplayClient) PrintGraph(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GraphResponse, error) {
	out := new(GraphResponse)
	err := grpc.Invoke(ctx, "/display.GPUDisplay/PrintGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDisplayClient) PrintGpuinfo(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*GraphResponse, error) {
	out := new(GraphResponse)
	err := grpc.Invoke(ctx, "/display.GPUDisplay/PrintGpuinfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDisplayClient) PrintUsages(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*UsageResponse, error) {
	out := new(UsageResponse)
	err := grpc.Invoke(ctx, "/display.GPUDisplay/PrintUsages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDisplayClient) PrintGpuDetails(ctx context.Context, in *ContUsageRequest, opts ...grpc.CallOption) (*ContUsageResponse, error) {
	out := new(ContUsageResponse)
	err := grpc.Invoke(ctx, "/display.GPUDisplay/PrintGpuDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDisplayClient) Version(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/display.GPUDisplay/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GPUDisplay service

type GPUDisplayServer interface {
	// PrintGraph returns the text graph of allocator state
	PrintGraph(context.Context, *google_protobuf1.Empty) (*GraphResponse, error)
	PrintGpuinfo(context.Context, *google_protobuf1.Empty) (*GraphResponse, error)
	// GPU usages
	PrintUsages(context.Context, *google_protobuf1.Empty) (*UsageResponse, error)
	// gpu算力详细信息
	PrintGpuDetails(context.Context, *ContUsageRequest) (*ContUsageResponse, error)
	// Version
	Version(context.Context, *google_protobuf1.Empty) (*VersionResponse, error)
}

func RegisterGPUDisplayServer(s *grpc.Server, srv GPUDisplayServer) {
	s.RegisterService(&_GPUDisplay_serviceDesc, srv)
}

func _GPUDisplay_PrintGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).PrintGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/display.GPUDisplay/PrintGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).PrintGraph(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDisplay_PrintGpuinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).PrintGpuinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/display.GPUDisplay/PrintGpuinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).PrintGpuinfo(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDisplay_PrintUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).PrintUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/display.GPUDisplay/PrintUsages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).PrintUsages(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDisplay_PrintGpuDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).PrintGpuDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/display.GPUDisplay/PrintGpuDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).PrintGpuDetails(ctx, req.(*ContUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDisplay_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/display.GPUDisplay/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).Version(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GPUDisplay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "display.GPUDisplay",
	HandlerType: (*GPUDisplayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrintGraph",
			Handler:    _GPUDisplay_PrintGraph_Handler,
		},
		{
			MethodName: "PrintGpuinfo",
			Handler:    _GPUDisplay_PrintGpuinfo_Handler,
		},
		{
			MethodName: "PrintUsages",
			Handler:    _GPUDisplay_PrintUsages_Handler,
		},
		{
			MethodName: "PrintGpuDetails",
			Handler:    _GPUDisplay_PrintGpuDetails_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _GPUDisplay_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/runtime/display/api.proto",
}

func init() { proto.RegisterFile("pkg/api/runtime/display/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0x9d, 0xff, 0x9b, 0xa6, 0xcd, 0x37, 0x5f, 0x55, 0x4d, 0x4d, 0x91, 0x52, 0xa3, 0xa2,
	0x08, 0x50, 0x82, 0x0a, 0x12, 0x08, 0x89, 0x15, 0x6d, 0xa3, 0x48, 0x04, 0x45, 0x46, 0x65, 0xc1,
	0xa6, 0x72, 0xed, 0x69, 0x18, 0x1a, 0xdb, 0x83, 0x3d, 0x8e, 0x9a, 0x2d, 0x0f, 0xc0, 0x86, 0x1d,
	0x0f, 0xc0, 0x5b, 0xf0, 0x14, 0x48, 0x3c, 0x01, 0x0f, 0x82, 0xe6, 0xc7, 0x8e, 0xdd, 0x06, 0x04,
	0x1b, 0x6b, 0xce, 0xb9, 0xd7, 0x67, 0xce, 0xdc, 0x3b, 0x73, 0x61, 0x9f, 0x5d, 0xce, 0x86, 0x2e,
	0xa3, 0xc3, 0x38, 0x0d, 0x39, 0x0d, 0xc8, 0xd0, 0xa7, 0x09, 0x9b, 0xbb, 0x4b, 0xc1, 0x0d, 0x58,
	0x1c, 0xf1, 0x08, 0x35, 0x34, 0x65, 0xed, 0xcd, 0xa2, 0x68, 0x36, 0x27, 0x32, 0xdd, 0x0d, 0xc3,
	0x88, 0xbb, 0x9c, 0x46, 0x61, 0xa2, 0xd2, 0xac, 0x5b, 0x3a, 0x2a, 0xd1, 0x79, 0x7a, 0x31, 0x24,
	0x01, 0xe3, 0x4b, 0x15, 0xb4, 0x0f, 0xa0, 0x33, 0x8a, 0x5d, 0xf6, 0xce, 0x21, 0x09, 0x8b, 0xc2,
	0x84, 0xa0, 0x6d, 0xa8, 0xcd, 0x04, 0x81, 0x8d, 0x9e, 0xd1, 0x6f, 0x39, 0x0a, 0xd8, 0x5f, 0x0c,
	0xe8, 0x9c, 0x26, 0xee, 0x8c, 0xe4, 0x79, 0x4f, 0xa0, 0x96, 0x0a, 0x02, 0x1b, 0xbd, 0x4a, 0xbf,
	0x7d, 0xb8, 0x3f, 0xd0, 0x66, 0x06, 0xa5, 0x34, 0x85, 0x8e, 0x43, 0x1e, 0x2f, 0x1d, 0x95, 0x6f,
	0x4d, 0x01, 0x56, 0x24, 0xea, 0x42, 0xe5, 0x92, 0x2c, 0xf5, 0x66, 0x62, 0x89, 0x1e, 0x40, 0x6d,
	0xe1, 0xce, 0x53, 0x82, 0xcd, 0x9e, 0xd1, 0x6f, 0x1f, 0xee, 0xe4, 0xc2, 0x2f, 0xa2, 0x90, 0xbb,
	0x34, 0x24, 0xf1, 0x6b, 0xee, 0x72, 0x47, 0x25, 0x3d, 0x33, 0x9f, 0x1a, 0x76, 0x1f, 0xba, 0x22,
	0xa6, 0x37, 0xfe, 0x90, 0x92, 0x84, 0xcb, 0x63, 0xb0, 0x74, 0xec, 0xe7, 0xc7, 0x10, 0xc0, 0xfe,
	0x61, 0x42, 0xa7, 0x24, 0x83, 0x1e, 0x43, 0x35, 0xe1, 0x2e, 0xd7, 0xa7, 0xe8, 0xad, 0xdf, 0x6c,
	0x20, 0x3e, 0xea, 0x10, 0x32, 0x1b, 0x61, 0x68, 0xb0, 0x38, 0x7a, 0x4f, 0x3c, 0x2e, 0x5d, 0xb6,
	0x9c, 0x0c, 0x22, 0x04, 0xd5, 0x34, 0x21, 0x31, 0xae, 0x48, 0x5a, 0xae, 0x45, 0xb6, 0x37, 0x4f,
	0x13, 0x4e, 0x62, 0x5c, 0x55, 0xd9, 0x1a, 0xca, 0xdd, 0x19, 0xf1, 0x70, 0xed, 0xcf, 0xbb, 0x33,
	0xe2, 0x65, 0xbb, 0x33, 0xe2, 0x59, 0x63, 0x68, 0xe5, 0x86, 0xd6, 0x14, 0xf0, 0x6e, 0xb9, 0x80,
	0xdd, 0x5c, 0xf5, 0x88, 0x2c, 0xa8, 0x47, 0x92, 0x42, 0xe9, 0xac, 0x13, 0x68, 0xe5, 0xea, 0x6b,
	0xa4, 0xee, 0x94, 0xa5, 0x3a, 0xb9, 0x94, 0xf8, 0xa9, 0xd8, 0x82, 0xe7, 0xf0, 0x5f, 0xa1, 0x05,
	0xfa, 0x8a, 0xf4, 0xa1, 0x4a, 0xc3, 0x8b, 0x48, 0xd7, 0x76, 0xbb, 0x74, 0xba, 0x11, 0x4b, 0x45,
	0xcc, 0x91, 0x19, 0xf6, 0x37, 0x13, 0xda, 0x05, 0x16, 0xf5, 0xa0, 0xad, 0x0b, 0xfa, 0xca, 0x0d,
	0x88, 0x76, 0x54, 0xa4, 0x64, 0x07, 0x22, 0x5f, 0x46, 0xb3, 0x0e, 0x28, 0x28, 0xab, 0x1d, 0x85,
	0x7c, 0xec, 0x5f, 0xe9, 0x26, 0x64, 0x10, 0xed, 0x40, 0x5d, 0x2c, 0xa9, 0xaf, 0xdb, 0xa0, 0x11,
	0xb2, 0xa0, 0x29, 0x56, 0x52, 0xac, 0x26, 0x23, 0x39, 0x16, 0xff, 0xb0, 0x68, 0x4e, 0xbd, 0x25,
	0xae, 0xab, 0x7f, 0x14, 0x12, 0xf7, 0x6b, 0x24, 0xef, 0x57, 0x43, 0xdd, 0x2f, 0x09, 0x44, 0x05,
	0x67, 0x2c, 0xc5, 0xcd, 0x9e, 0xd1, 0xaf, 0x38, 0x62, 0x29, 0x98, 0x80, 0x04, 0xb8, 0xa5, 0x98,
	0x80, 0x04, 0xc2, 0xdf, 0x49, 0x4c, 0xc8, 0x84, 0x04, 0x18, 0x24, 0x9b, 0x41, 0xe1, 0x83, 0xc5,
	0x34, 0x8a, 0x29, 0x5f, 0xe2, 0xb6, 0xf2, 0x91, 0x61, 0xb4, 0x07, 0x2d, 0xe1, 0x27, 0x61, 0xae,
	0x47, 0xf0, 0x86, 0x0c, 0xae, 0x08, 0xfb, 0x21, 0x34, 0x74, 0x73, 0xd1, 0x01, 0x54, 0x7c, 0xb2,
	0xd0, 0x35, 0xff, 0xff, 0x5a, 0xef, 0xc7, 0xa2, 0xe4, 0x22, 0x6e, 0x7f, 0x32, 0x00, 0x56, 0x1c,
	0xda, 0x04, 0x93, 0x66, 0x6f, 0xc5, 0xa4, 0x3e, 0xda, 0x85, 0xa6, 0xe7, 0xc6, 0xfe, 0x19, 0xf5,
	0xaf, 0xb2, 0xfa, 0x0a, 0x2c, 0xaa, 0xa8, 0xcf, 0x28, 0xbc, 0x9b, 0xa5, 0x33, 0xb6, 0x15, 0x23,
	0xce, 0x88, 0xa0, 0xca, 0xa8, 0x9f, 0xe0, 0x8d, 0x5e, 0xa5, 0x5f, 0x73, 0xe4, 0x1a, 0xdd, 0x06,
	0xf0, 0xe5, 0x86, 0x67, 0x22, 0xb9, 0x23, 0x93, 0x5b, 0x8a, 0x99, 0x90, 0xc0, 0xbe, 0x0f, 0x5b,
	0x6f, 0x48, 0x9c, 0xd0, 0x28, 0xcc, 0xef, 0x0f, 0x86, 0xc6, 0x42, 0x51, 0xda, 0x59, 0x06, 0xed,
	0x7b, 0x50, 0x15, 0x37, 0x30, 0xf3, 0x62, 0xdc, 0xa8, 0xb7, 0x99, 0xd7, 0xfb, 0xf0, 0x6b, 0x05,
	0x60, 0x34, 0x3d, 0x3d, 0x52, 0x85, 0x40, 0x2f, 0x01, 0xa6, 0x31, 0x0d, 0xb9, 0x9c, 0x7a, 0x68,
	0x67, 0xa0, 0x86, 0xe3, 0x20, 0x1b, 0x8e, 0x83, 0x63, 0x31, 0x1c, 0xad, 0xd5, 0xd4, 0x29, 0x4d,
	0x47, 0x7b, 0xf3, 0xe3, 0xf7, 0x9f, 0x9f, 0xcd, 0x26, 0xaa, 0x0f, 0xe5, 0x5c, 0x44, 0x53, 0xd8,
	0x50, 0x6a, 0xfa, 0xe2, 0xfe, 0xab, 0x5e, 0x57, 0xea, 0x01, 0x6a, 0x0e, 0x67, 0x5a, 0x61, 0x02,
	0x6d, 0xa9, 0x28, 0x9f, 0x52, 0xf2, 0x17, 0x82, 0xa5, 0x37, 0x57, 0x30, 0x28, 0xa7, 0x2d, 0x7a,
	0x0b, 0x5b, 0x99, 0xc1, 0x23, 0xc2, 0x5d, 0x3a, 0x4f, 0xd0, 0x6e, 0xe9, 0x21, 0x16, 0xa7, 0xa6,
	0x65, 0xad, 0x0b, 0xdd, 0xb0, 0xea, 0x6b, 0xa1, 0x09, 0x34, 0x74, 0xcb, 0x7e, 0x6b, 0x13, 0xe7,
	0x82, 0xd7, 0x9a, 0x5b, 0x90, 0xd3, 0x4d, 0x3d, 0xaf, 0xcb, 0x7f, 0x1f, 0xfd, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0xff, 0x8c, 0xfa, 0x80, 0xfa, 0x06, 0x00, 0x00,
}
