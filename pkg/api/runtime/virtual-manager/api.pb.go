// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/api/runtime/virtual-manager/api.proto

/*
Package virtualmanager is a generated protocol buffer package.

It is generated from these files:
	pkg/api/runtime/virtual-manager/api.proto

It has these top-level messages:
	VgpuInfoRequest
	VgpuInfoResponse
	PodItem
*/
package virtualmanager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GPUSpecInfoResponse 当前节点上所有 GPU 卡的 spec 信息
type VgpuInfoRequest struct {
	CardId string `protobuf:"bytes,1,opt,name=cardId" json:"cardId,omitempty"`
}

func (m *VgpuInfoRequest) Reset()                    { *m = VgpuInfoRequest{} }
func (m *VgpuInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*VgpuInfoRequest) ProtoMessage()               {}
func (*VgpuInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VgpuInfoRequest) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

// GPUSpecInfoResponse 当前节点上所有 GPU 卡的 spec 信息
type VgpuInfoResponse struct {
	ModelName string     `protobuf:"bytes,1,opt,name=modelName" json:"modelName,omitempty"`
	TaskNums  int32      `protobuf:"varint,2,opt,name=taskNums" json:"taskNums,omitempty"`
	PodItems  []*PodItem `protobuf:"bytes,3,rep,name=podItems" json:"podItems,omitempty"`
}

func (m *VgpuInfoResponse) Reset()                    { *m = VgpuInfoResponse{} }
func (m *VgpuInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*VgpuInfoResponse) ProtoMessage()               {}
func (*VgpuInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VgpuInfoResponse) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

func (m *VgpuInfoResponse) GetTaskNums() int32 {
	if m != nil {
		return m.TaskNums
	}
	return 0
}

func (m *VgpuInfoResponse) GetPodItems() []*PodItem {
	if m != nil {
		return m.PodItems
	}
	return nil
}

type PodItem struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace  string   `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Containers []string `protobuf:"bytes,3,rep,name=containers" json:"containers,omitempty"`
}

func (m *PodItem) Reset()                    { *m = PodItem{} }
func (m *PodItem) String() string            { return proto.CompactTextString(m) }
func (*PodItem) ProtoMessage()               {}
func (*PodItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PodItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodItem) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodItem) GetContainers() []string {
	if m != nil {
		return m.Containers
	}
	return nil
}

func init() {
	proto.RegisterType((*VgpuInfoRequest)(nil), "virtualmanager.VgpuInfoRequest")
	proto.RegisterType((*VgpuInfoResponse)(nil), "virtualmanager.VgpuInfoResponse")
	proto.RegisterType((*PodItem)(nil), "virtualmanager.podItem")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VirtualManager service

type VirtualManagerClient interface {
	Vgpuinfo(ctx context.Context, in *VgpuInfoRequest, opts ...grpc.CallOption) (*VgpuInfoResponse, error)
}

type virtualManagerClient struct {
	cc *grpc.ClientConn
}

func NewVirtualManagerClient(cc *grpc.ClientConn) VirtualManagerClient {
	return &virtualManagerClient{cc}
}

func (c *virtualManagerClient) Vgpuinfo(ctx context.Context, in *VgpuInfoRequest, opts ...grpc.CallOption) (*VgpuInfoResponse, error) {
	out := new(VgpuInfoResponse)
	err := grpc.Invoke(ctx, "/virtualmanager.VirtualManager/Vgpuinfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VirtualManager service

type VirtualManagerServer interface {
	Vgpuinfo(context.Context, *VgpuInfoRequest) (*VgpuInfoResponse, error)
}

func RegisterVirtualManagerServer(s *grpc.Server, srv VirtualManagerServer) {
	s.RegisterService(&_VirtualManager_serviceDesc, srv)
}

func _VirtualManager_Vgpuinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VgpuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualManagerServer).Vgpuinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualmanager.VirtualManager/Vgpuinfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualManagerServer).Vgpuinfo(ctx, req.(*VgpuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtualManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "virtualmanager.VirtualManager",
	HandlerType: (*VirtualManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vgpuinfo",
			Handler:    _VirtualManager_Vgpuinfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/runtime/virtual-manager/api.proto",
}

func init() { proto.RegisterFile("pkg/api/runtime/virtual-manager/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4f, 0xbb, 0x40,
	0x10, 0xc5, 0xc3, 0xb7, 0x5f, 0x2b, 0x8c, 0x49, 0x35, 0x73, 0x50, 0xd2, 0x18, 0x25, 0x9c, 0xe8,
	0x41, 0x48, 0xda, 0xbf, 0x82, 0x43, 0x7b, 0xd8, 0x43, 0x2f, 0x1e, 0xcc, 0x0a, 0x53, 0x42, 0xda,
	0xfd, 0xe1, 0xee, 0xe2, 0xdd, 0xff, 0xdc, 0x00, 0x9b, 0xa2, 0x4d, 0x3c, 0x31, 0xf3, 0xde, 0x4b,
	0xde, 0x87, 0x59, 0x58, 0xe9, 0x63, 0x53, 0x70, 0xdd, 0x16, 0xa6, 0x93, 0xae, 0x15, 0x54, 0x7c,
	0xb6, 0xc6, 0x75, 0xfc, 0xf4, 0x22, 0xb8, 0xe4, 0x0d, 0x99, 0xde, 0xcb, 0xb5, 0x51, 0x4e, 0xe1,
	0xc2, 0x5b, 0xde, 0x49, 0x57, 0x70, 0xbb, 0x6f, 0x74, 0x57, 0xca, 0x83, 0x62, 0xf4, 0xd1, 0x91,
	0x75, 0x78, 0x0f, 0xf3, 0x8a, 0x9b, 0xba, 0xac, 0xe3, 0x20, 0x09, 0xb2, 0x88, 0xf9, 0x2d, 0xfd,
	0x0a, 0xe0, 0x6e, 0xca, 0x5a, 0xad, 0xa4, 0x25, 0x7c, 0x84, 0x48, 0xa8, 0x9a, 0x4e, 0x3b, 0x2e,
	0xc8, 0xe7, 0x27, 0x01, 0x97, 0x10, 0x3a, 0x6e, 0x8f, 0xbb, 0x4e, 0xd8, 0xf8, 0x5f, 0x12, 0x64,
	0x57, 0xec, 0xbc, 0xe3, 0x06, 0x42, 0xad, 0xea, 0xd2, 0x91, 0xb0, 0xf1, 0x2c, 0x99, 0x65, 0x37,
	0xeb, 0x87, 0xfc, 0x37, 0x5c, 0xee, 0x7d, 0x76, 0x0e, 0xa6, 0xaf, 0x70, 0xed, 0x67, 0x44, 0xf8,
	0x2f, 0xa7, 0xd2, 0x61, 0xee, 0x69, 0xfa, 0xaf, 0xd5, 0xbc, 0xa2, 0xa1, 0x30, 0x62, 0x93, 0x80,
	0x4f, 0x00, 0x95, 0x92, 0x8e, 0xb7, 0x92, 0xcc, 0xd8, 0x19, 0xb1, 0x1f, 0xca, 0xfa, 0x0d, 0x16,
	0xfb, 0x11, 0x60, 0x3b, 0x02, 0xe0, 0x16, 0xc2, 0xfe, 0x8f, 0x5b, 0x79, 0x50, 0xf8, 0x7c, 0x49,
	0x77, 0x71, 0xb7, 0x65, 0xf2, 0x77, 0x60, 0x3c, 0xd6, 0xfb, 0x7c, 0x78, 0x83, 0xcd, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xd4, 0x8f, 0x80, 0xbb, 0xb0, 0x01, 0x00, 0x00,
}
